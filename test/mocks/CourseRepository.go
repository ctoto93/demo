// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	demo "github.com/ctoto93/demo"
	mock "github.com/stretchr/testify/mock"
)

// CourseRepository is an autogenerated mock type for the CourseRepository type
type CourseRepository struct {
	mock.Mock
}

// AddCourse provides a mock function with given fields: c
func (_m *CourseRepository) AddCourse(c *demo.Course) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*demo.Course) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCourse provides a mock function with given fields: id
func (_m *CourseRepository) DeleteCourse(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditCourse provides a mock function with given fields: c
func (_m *CourseRepository) EditCourse(c *demo.Course) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*demo.Course) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCourse provides a mock function with given fields: id
func (_m *CourseRepository) GetCourse(id string) (demo.Course, error) {
	ret := _m.Called(id)

	var r0 demo.Course
	if rf, ok := ret.Get(0).(func(string) demo.Course); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(demo.Course)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
